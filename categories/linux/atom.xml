<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Deprecated Behaviour]]></title>
  <link href="http://blog.tekerson.com/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.tekerson.com/"/>
  <updated>2013-03-28T00:21:09+10:00</updated>
  <id>http://blog.tekerson.com/</id>
  <author>
    <name><![CDATA[Brenton Alker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Basic branching with git]]></title>
    <link href="http://blog.tekerson.com/2008/09/05/basic-branching-with-git/"/>
    <updated>2008-09-05T22:48:22+10:00</updated>
    <id>http://blog.tekerson.com/2008/09/05/basic-branching-with-git</id>
    <content type="html"><![CDATA[<p>With 3 long-running tasks concurrently on my plate, I finally got around to learning branching in <a href="http://git.or.cz/">git</a>, and it's <strong>easy!</strong></p>

<p>Until this week, I had managed to get by without learning to branch. I have looked previously but got a little lost. I often temporarily stored my work using "<a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html">git-stash</a>" to work on multiple things at once, but this is very limiting.</p>

<p>So, Here we go. My basic workflow now look like this.</p>

<p>Create a new branch (based on the HEAD of your current branch), and automatically switch to it:</p>

<pre><code>&lt;code&gt;&lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-checkout.html" title="git-checkout manual page"&gt;git checkout&lt;/a&gt; -b my_branch&lt;/code&gt;
</code></pre>

<p>Then you can work within this branch as you always would.</p>

<p>Work, work, work...</p>

<pre><code>&lt;code&gt;&lt;a&gt;&lt;/a&gt;&lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-add.html" title="git-add manual page"&gt;git add&lt;/a&gt; files_i_have_edited.txt
&lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-commit.html" title="git-commit manual page"&gt;git commit&lt;/a&gt; -m 'My changes'&lt;/code&gt;
</code></pre>

<p>Repeating this step until the task is complete. Then, to get the changes back into the master branch. Switch to it</p>

<pre><code>&lt;code&gt;&lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-checkout.html" title="git-checkout manual page"&gt;git checkout&lt;/a&gt; master&lt;/code&gt;
</code></pre>

<p>And pull the changes from the branch</p>

<pre><code>&lt;code&gt;&lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-pull.html" title="git-pull manual page"&gt;git pull&lt;/a&gt; . my_branch&lt;/code&gt;
</code></pre>

<p>Easy. No need to remember revision numbers where you branched, or which changed have already been merged. You can of course switch back to the branch and continue work with</p>

<pre><code>&lt;code&gt;&lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-checkout.html" title="git-checkout manual page"&gt;git checkout&lt;/a&gt; my_branch&lt;/code&gt;
</code></pre>

<p>this "edit, commit, pull" cycle can continue until the task is complete. Then, once you're satisfied you can delete the branch with</p>

<pre><code>&lt;code&gt;&lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-branch.html" title="git-branch manual page"&gt;git branch&lt;/a&gt; -d my_branch&lt;/code&gt;
</code></pre>

<p>It's still in the history of course, but no need to keep old branches around.</p>

<p>Hope that makes things clear to anyone else who was confused as I was by some of the overly complicated explanation of branching in git.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set Manipulation of files with uniq & sort]]></title>
    <link href="http://blog.tekerson.com/2008/03/22/set-manipulation-of-files-with-uniq-sort/"/>
    <updated>2008-03-22T11:24:19+10:00</updated>
    <id>http://blog.tekerson.com/2008/03/22/set-manipulation-of-files-with-uniq-sort</id>
    <content type="html"><![CDATA[<p>I often find myself performing operations on single column CSV files to perform tasks such as merging member id lists, or email addresses, counting unique entries, finding duplicates etc.</p>

<p>By applying some set theory (remember that from math class) and some standard linux/unix command line tools, almost any operation I have ever wanted to achieve in this vain is possible. And I have found <a href="http://linux.byexamples.com/archives/127/uniq-and-basic-set-theory/">a post, over at Linux By Examples</a> that provides a simple list of operations and examples of how to achieve them on text files using sort and uniq.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manually Deliver Email to Maildir]]></title>
    <link href="http://blog.tekerson.com/2008/03/14/manually-deliver-email-to-maildir/"/>
    <updated>2008-03-14T21:12:31+10:00</updated>
    <id>http://blog.tekerson.com/2008/03/14/manually-deliver-email-to-maildir</id>
    <content type="html"><![CDATA[<p>I have, on occasion, had need to manually drop an email into a users inbox. For example, when an over-zealous virus scanner dumps mail into "quarantine".</p>

<p>After confirming that the email are, in fact, virus free, the emails are able to be injected into the users maildir with the help of <a href="http://jeenyus.net/~budney/linux/software/safecat.html">safecat</a>, which guarantees atomic copying (even from a slow standard input stream) and unique file naming.</p>

<p>The basic format of the command is:
```</p>

<pre><code>safecat &lt;tmp_dir&gt; .Maildir/new/ &lt; msg.eml
</code></pre>

<p>```
with the only restriction being that tmp_dir must be on the same file system, as the algorithm uses hard links to guarantee instant availability of the complete file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using procmail to apply filter mail into Maildir folders]]></title>
    <link href="http://blog.tekerson.com/2007/12/16/using-procmail-to-apply-filter-mail-into-maildir-folders/"/>
    <updated>2007-12-16T21:24:17+10:00</updated>
    <id>http://blog.tekerson.com/2007/12/16/using-procmail-to-apply-filter-mail-into-maildir-folders</id>
    <content type="html"><![CDATA[<p>This topic wasn't on my "to do" list, but it came up. So here it is.</p>

<p>Use of procmail to filter emails is definitely not a new thing, that is what it does after all. But in my attempt to configure it, I found very little clear information about support for "Maildir" style delivery amongst the wealth of documentation on the subject.</p>

<p>The 2 main differences in a .procmailrc that works with Maildir, is the trailing slash on the MAILDIR value and the way target folders are specified.</p>

<p>eg. The start of my .procmailrc looks like this:
```</p>

<pre><code>MAILDIR=$HOME/Maildir/
DEFAULT=$MAILDIR

:0
* ^To:.*(@lists\.danga\.com)
.List/new
</code></pre>

<p>```</p>

<p>So, the 2 points to note, as I said are. The maildir path ends in "/" and the destination is a folder within the Maildir, which is a hidden directory with its own set of cur/new emails in it.</p>

<p>Thanks to procmail, I now only have one location to maintain my filtering rules. My email can then be accessed through IMAP from work, home, laptop and webmail without them being moved into the wrong folders.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rename multiple files with a Regular Expression (Regex)]]></title>
    <link href="http://blog.tekerson.com/2007/07/26/rename-multiple-files-with-a-regular-expression-regex/"/>
    <updated>2007-07-26T03:00:57+10:00</updated>
    <id>http://blog.tekerson.com/2007/07/26/rename-multiple-files-with-a-regular-expression-regex</id>
    <content type="html"><![CDATA[<p>It is often useful to be able to rename multiple files at the same time. Typical cases include changing a file extension (eg. <em>.jpeg to </em>.jpg) or renaming a set of files moved from one server to another (such as when repairing database replication, eg. slave1-bin.<em> to slave2-bin.</em>)</p>

<p>It is possible to write a shell script that will perform this task, but the ones I have seen are cumbersome and not very intuitive.</p>

<p>There is a script, I believe it comes bundles with Perl installation (at least on Debian), that allows files to be renames using regular expressions. It is simple to use, but lets you harness the power of perl regular expressions.</p>

<p>The basic syntax that I use most often involves using a substitute command (similar to those used in <a href="http://www.gnu.org/software/sed/">sed</a> for example)</p>

<p>eg: Rename all jpeg images to jpg files in the images directory.
<code>
rename 's/\.jpeg$/.jpg/' images/*
</code></p>

<p>Mmm… Regex…</p>
]]></content>
  </entry>
  
</feed>
