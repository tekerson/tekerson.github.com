<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Deprecated Behaviour]]></title>
  <link href="http://blog.tekerson.com/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.tekerson.com/"/>
  <updated>2015-07-15T22:52:21+10:00</updated>
  <id>http://blog.tekerson.com/</id>
  <author>
    <name><![CDATA[Brenton Alker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Open and close SSH tunnel in script]]></title>
    <link href="http://blog.tekerson.com/2014/05/06/open-and-close-ssh-tunnel-in-script/"/>
    <updated>2014-05-06T13:38:00+10:00</updated>
    <id>http://blog.tekerson.com/2014/05/06/open-and-close-ssh-tunnel-in-script</id>
    <content type="html"><![CDATA[<p>I have been using SSH tunnels for a <em>long</em> time. Usually, I just manually open the tunnels I require. But, setting up my new machine (archlinux on a Thinkpad t440s.. shiny!) I&rsquo;ve been writing a lot of shell scripts to automate much of what I used to do manually.</p>

<p>In that spirit, I wanted a script to create an ssh tunnel and connect my irc client (irssi) to my bouncer (znc), behind my home firewall.</p>

<p>So, this is what I&rsquo;m using:</p>

<pre><code>#!/bin/bash
ssh -f -o ExitOnForwardFailure=yes -L 6667:localhost:6667 user@home.example.com sleep 30
irssi
</code></pre>

<p>The <code>-f -o ExitOnForwardFailure=yes</code> combination makes ssh wait until the forwarded ports have been established before backgrounding. Effectively, this blocks the script until the ports are ready to use.</p>

<p>The <code>sleep 30</code> keeps the connection open (in the background) for 30 seconds before ssh terminates. <em>However</em>, if there is an open connection on the tunnel, ssh will wait for it to close before terminating. This means, you have 30 seconds to connect to the forwarded port, then it will stay open as long as you&rsquo;re using it. So, once I quit irssi, the tunnel closes.</p>

<p>Then, irssi configured to connect to localhost:6667 which is tunneled to localhost:6667 on the target machine, where it finds znc!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Share tmux Windows Across Sessions]]></title>
    <link href="http://blog.tekerson.com/2013/05/28/share-tmux-windows-across-sessions/"/>
    <updated>2013-05-28T16:01:00+10:00</updated>
    <id>http://blog.tekerson.com/2013/05/28/share-tmux-windows-across-sessions</id>
    <content type="html"><![CDATA[<p>When working in a terminal (the vast majority of the time) I run the terminal multiplexer <a href="http://tmux.sourceforge.net/">tmux</a>, with one session for each project I am currently working on. I like to have a window for my IRC client in every session, so I can keep an eye on it. The best way to do this is to share the tmux window across multiple tmux sessions.</p>

<p>To perform this setup, we can create a new session for &ldquo;shared&rdquo; applications, opening irssi in a window named &ldquo;irc&rdquo;. Either manually create the windows and open the applications in them, or, if you&rsquo;re lazy and use the same setup regularly. Script it, something like so:</p>

<pre><code>tmux new-session -s shared "tmux new-window -n irc irssi"
</code></pre>

<p>You can use the automatically-assigned window names, but since I&rsquo;m referencing them across sessions, I feel explicitly naming them (with the <code>-n</code>) is more robust.</p>

<p>Once the applications are running, we can link the windows to the working session using tmux&rsquo;s <code>link-window</code> command, which has the basic form:</p>

<pre><code>tmux link-window -s &lt;src-window&gt; -t &lt;dst-window&gt;
</code></pre>

<p>Any time a tmux command requires a reference to a window, we can provide an absolute reference to any window in any session using the <code>session:window</code> format where <code>session</code> is the name of the session and <code>window</code> is the name (or number) of the window in that session.</p>

<p>Using this, we can use the <code>link-window</code> our &ldquo;shared:irc&rdquo; window to index &ldquo;9&rdquo; in the current session. Which looks like:</p>

<pre><code>tmux link-window -s shared:irc -t 9
</code></pre>

<p>The target parameter is optional, without it the window will be placed in the next available index, but I like to place it at the end of the list so they don&rsquo;t get in the way of my &ldquo;real work&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic branching with git]]></title>
    <link href="http://blog.tekerson.com/2008/09/05/basic-branching-with-git/"/>
    <updated>2008-09-05T22:48:22+10:00</updated>
    <id>http://blog.tekerson.com/2008/09/05/basic-branching-with-git</id>
    <content type="html"><![CDATA[<p>With 3 long-running tasks concurrently on my plate, I finally got around to learning branching in <a href="http://git.or.cz/">git</a>, and it&rsquo;s <strong>easy!</strong></p>

<p>Until this week, I had managed to get by without learning to branch. I have looked previously but got a little lost. I often temporarily stored my work using &ldquo;<a href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html">git-stash</a>&rdquo; to work on multiple things at once, but this is very limiting.</p>

<p>So, Here we go. My basic workflow now look like this.</p>

<p>Create a new branch (based on the HEAD of your current branch), and automatically switch to it:</p>

<pre><code>&lt;code&gt;&lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-checkout.html" title="git-checkout manual page"&gt;git checkout&lt;/a&gt; -b my_branch&lt;/code&gt;
</code></pre>

<p>Then you can work within this branch as you always would.</p>

<p>Work, work, work&hellip;</p>

<pre><code>&lt;code&gt;&lt;a&gt;&lt;/a&gt;&lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-add.html" title="git-add manual page"&gt;git add&lt;/a&gt; files_i_have_edited.txt
&lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-commit.html" title="git-commit manual page"&gt;git commit&lt;/a&gt; -m 'My changes'&lt;/code&gt;
</code></pre>

<p>Repeating this step until the task is complete. Then, to get the changes back into the master branch. Switch to it</p>

<pre><code>&lt;code&gt;&lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-checkout.html" title="git-checkout manual page"&gt;git checkout&lt;/a&gt; master&lt;/code&gt;
</code></pre>

<p>And pull the changes from the branch</p>

<pre><code>&lt;code&gt;&lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-pull.html" title="git-pull manual page"&gt;git pull&lt;/a&gt; . my_branch&lt;/code&gt;
</code></pre>

<p>Easy. No need to remember revision numbers where you branched, or which changed have already been merged. You can of course switch back to the branch and continue work with</p>

<pre><code>&lt;code&gt;&lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-checkout.html" title="git-checkout manual page"&gt;git checkout&lt;/a&gt; my_branch&lt;/code&gt;
</code></pre>

<p>this &ldquo;edit, commit, pull&rdquo; cycle can continue until the task is complete. Then, once you&rsquo;re satisfied you can delete the branch with</p>

<pre><code>&lt;code&gt;&lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-branch.html" title="git-branch manual page"&gt;git branch&lt;/a&gt; -d my_branch&lt;/code&gt;
</code></pre>

<p>It&rsquo;s still in the history of course, but no need to keep old branches around.</p>

<p>Hope that makes things clear to anyone else who was confused as I was by some of the overly complicated explanation of branching in git.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set Manipulation of files with uniq & sort]]></title>
    <link href="http://blog.tekerson.com/2008/03/22/set-manipulation-of-files-with-uniq-sort/"/>
    <updated>2008-03-22T11:24:19+10:00</updated>
    <id>http://blog.tekerson.com/2008/03/22/set-manipulation-of-files-with-uniq-sort</id>
    <content type="html"><![CDATA[<p>I often find myself performing operations on single column CSV files to perform tasks such as merging member id lists, or email addresses, counting unique entries, finding duplicates etc.</p>

<p>By applying some set theory (remember that from math class) and some standard linux/unix command line tools, almost any operation I have ever wanted to achieve in this vain is possible. And I have found <a href="http://linux.byexamples.com/archives/127/uniq-and-basic-set-theory/">a post, over at Linux By Examples</a> that provides a simple list of operations and examples of how to achieve them on text files using sort and uniq.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manually Deliver Email to Maildir]]></title>
    <link href="http://blog.tekerson.com/2008/03/14/manually-deliver-email-to-maildir/"/>
    <updated>2008-03-14T21:12:31+10:00</updated>
    <id>http://blog.tekerson.com/2008/03/14/manually-deliver-email-to-maildir</id>
    <content type="html"><![CDATA[<p>I have, on occasion, had need to manually drop an email into a users inbox. For example, when an over-zealous virus scanner dumps mail into &ldquo;quarantine&rdquo;.</p>

<p>After confirming that the email are, in fact, virus free, the emails are able to be injected into the users maildir with the help of <a href="http://jeenyus.net/~budney/linux/software/safecat.html">safecat</a>, which guarantees atomic copying (even from a slow standard input stream) and unique file naming.</p>

<p>The basic format of the command is:
```</p>

<pre><code>safecat &lt;tmp_dir&gt; .Maildir/new/ &lt; msg.eml
</code></pre>

<p>```
with the only restriction being that tmp_dir must be on the same file system, as the algorithm uses hard links to guarantee instant availability of the complete file.</p>
]]></content>
  </entry>
  
</feed>
