<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Deprecated Behaviour]]></title>
  <link href="http://blog.tekerson.com/categories/code/atom.xml" rel="self"/>
  <link href="http://blog.tekerson.com/"/>
  <updated>2013-08-12T23:47:22+10:00</updated>
  <id>http://blog.tekerson.com/</id>
  <author>
    <name><![CDATA[Brenton Alker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Applying Functional Concepts to OOP: Referential Transparency / Command-Query Separation]]></title>
    <link href="http://blog.tekerson.com/2013/08/12/applying-functional-concepts-to-oop-referential-transparency-slash-command-query-separation/"/>
    <updated>2013-08-12T23:34:00+10:00</updated>
    <id>http://blog.tekerson.com/2013/08/12/applying-functional-concepts-to-oop-referential-transparency-slash-command-query-separation</id>
    <content type="html"><![CDATA[<p>I've been studying functional programming lately (it's trendy) and while it's great to just learn new languages and paradigm, it's always nice when the principles can be applied to everyday work.</p>

<p>Command-Query separation is probably one of the lesser known principles of object-oriented programming (OOP). Proposed by Bertrand Meyer in "Object Oriented Software Construction", it states that a function (or method) should perform a Command (do something) or a Query (return a value) but not both. So, any function that returns a value should not modify state. In <a href="http://martinfowler.com/bliki/CommandQuerySeparation.html">Martin Fowler's discussion of the principle</a> he mentions that "it would be nice if the language itself would support this notion".</p>

<p>If occurs to me that functional languages do indeed grant Mr. Fowler his wish.</p>

<p>Functional programmers aim to compose programs using "pure" functions. In this case, "pure" is used to mean a functions that are "referentially transparent", that is, they only depend upon their parameters. A pure function, given the same set of parameters, will always return the same result. No external influences, including variables, databases, inputs or outputs can be used or modified by its execution.</p>

<p>Of course, a program that takes no input, can't access a data store and produces no output isn't very useful. As such, even the most pure of the functional languages have to allow the nasty real-world into its pristine clean-room. The difference though, is the strict boundaries that are constructed to protect the pure world from the impure. In Haskell, which is often held up as the purest of functional languages, this airlock is provided by Monads. I won't go into what a Monad is, it doesn't matter, and I'm not sure I even explain them even if I wanted to. The point is, there are language features that strictly separate functions that alter state with those that "only" perform calculation.</p>

<p>These referentially transparent "pure" functions are revered because they can be reused, re-ordered or parallelized and are guaranteed to always produce the same result. This makes programs more predictable and thus simpler to debug. When you know a function is pure, you need only check its return value; it can't have changed anything outside of itself.</p>

<p>So, while the languages most of us use daily don't offer this as a feature, maybe following the principle more often would make for more predictable, bug free code. And wouldn't that be nice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Post-fetch Manipulation (sorting) of ngResources in AngularJS]]></title>
    <link href="http://blog.tekerson.com/2013/07/10/post-fetch-manipulation-sorting-of-ngresources-in-angularjs/"/>
    <updated>2013-07-10T17:06:00+10:00</updated>
    <id>http://blog.tekerson.com/2013/07/10/post-fetch-manipulation-sorting-of-ngresources-in-angularjs</id>
    <content type="html"><![CDATA[<p>Just a quick tip that I found useful in a recent Angular.js application.</p>

<p>I was trying to randomize the order of elements within a list retrieved from a <a href="http://docs.angularjs.org/api/ngResource.$resource">ngResource</a> (answers in a quiz or poll application). The naive approach would be to write the code as if the resource fetch is synchronous.</p>

<p>``` js
angular.module('myApp').controller('MyCtrl', function ($scope, $resource, $routeParams) {</p>

<pre><code>var shuffle = function (list) { /* ... */ };
var repo = $resource('/api/question/:id', {id: '@id'});
$scope.question = repo.get({id: $routeParams.id});
shuffle(question.anwers);
</code></pre>

<p>});
```</p>

<p>The problem that will soon become apparent, is that the <code>get</code> is <em>not</em> synchronous. So, when the <code>shuffle(question.answer)</code> is called, the <code>question</code> object is not yet populated.</p>

<p>One approach that I encountered to circumvent the issue is to use the built in <a href="http://docs.angularjs.org/api/ng.filter:orderBy">orderBy filter</a> with a callback that randomly chooses the order. This works, because the filter is run when the returning data triggers a new digest. This may be good enough in some circumstances. The problem I encountered with this approach however, is the list is re-sorted every digest cycle. So, if there is anything much going on in the scope, the list will re-sort itself causing the bound elements in the page to jump around.</p>

<p>The solution for me, was to sort the list once, after it is retrieved. This can be accomplished by passing a callback, as the second argument to <code>$resource.get</code>, that will be called with the returned data once it becomes available. This allows you to perform any required manipulation on the data before it is assigned to the <code>$scope</code>.</p>

<p>``` js
angular.module('myApp').controller('MyCtrl', function ($scope, $resource, $routeParams) {</p>

<pre><code>var shuffle = function (list) { /* ... */ };
var repo = $resource('/api/question/:id', {id: '@id'});
$scope.question = repo.get({id: $routeParams.id}, function (question) {
    shuffle(question.anwers);
});
</code></pre>

<p>});
```</p>

<p>In this instance, the answers to the question are shuffled, but the pattern is useful any time you want to perform an action only <em>after</em> the data if fetched. This may include calculating aggregates or even fetching extra, dependant data.</p>

<p>As an aside, I don't believe this manipulation belongs in the controller and should probably be encapsulated in a service that the controller consumes. I will have a look at using "fat" services and "lean" controllers in a future post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrapping the Doctrine 2.0 Autoloader in Zend Framework]]></title>
    <link href="http://blog.tekerson.com/2009/09/08/bootstrapping-the-doctrine2-autoloader-in-zend-framework/"/>
    <updated>2009-09-08T01:03:53+10:00</updated>
    <id>http://blog.tekerson.com/2009/09/08/bootstrapping-the-doctrine2-autoloader-in-zend-framework</id>
    <content type="html"><![CDATA[<p><em><strong>Please Note:</strong> This post was based on the Alpha release of Doctrine2. They have since added Doctrine\Common\IsolatedClassLoader which (among other things) doesn't automatically register itself so we no longer have to unregister it, making things much easier.</em></p>

<p>Doctrine 2.0 looks like it might finally be the ORM framework I have been seeking for PHP. While the older versions of Doctrine provided great functionality, they were too intrusive for my taste. I think an ORM should provide a true <a href="http://martinfowler.com/eaaCatalog/dataMapper.html">data mapper</a>; in which the domain entities need know nothing about their persistence.</p>

<p>Matthew Weier O'Phinney has already posted about <a href="http://weierophinney.net/matthew/archives/220-Autoloading-Doctrine-and-Doctrine-entities-from-Zend-Framework.html">autoloading Doctrine in Zend Framework</a>, but Doctrine2 presents some new challenges. Mainly that Doctrine2 is fully PHP5.3, including "real" namespaces, so its classes don't follow the (current) Zend naming standard and the ZF autoloader won't load them for us.</p>

<p>Good News, Doctrine provides its own autoloader that we can leverage to load its own classes.</p>

<p>Bad News, the Doctrine autoloader automatically registers itself with spl_autoload_register, causing the normal Zend loader to be forgotten (well, pushed down the stack, where it isn't very useful).</p>

<p>Good News, it's easy to remove the doctrine autoloader using spl_autoload_unregister, then push it onto the ZF autoloader stack, targeting the Doctrine namespace. Letting the ZF autoloader call it as necessary.</p>

<p>Enough jibber-jabber, how do we do all this? In the bootstrap! Adding this method to your Bootstrap.php will achieve what we want; adding the Doctrine autoloader to the Zend Framework autoloader queue for the "Doctrine\" namespace.</p>

<p>``` php
&lt;?php</p>

<pre><code>protected function _initDoctrine()
{
    // Create the doctrine autoloader and remove it from the spl autoload stack (it adds itself)
    require_once 'Doctrine/Common/ClassLoader.php';
    $doctrineAutoloader = array(new \Doctrine\Common\ClassLoader(), 'loadClass');
    spl_autoload_unregister($doctrineAutoloader);

    // Fetch the global Zend Autoloader
    $autoloader = Zend_Loader_Autoloader::getInstance();

    // Push the doctrine autoloader to load for the Doctrine\ namespace
    $autoloader-&gt;pushAutoloader($doctrineAutoloader, 'Doctrine\\');
}
</code></pre>

<p>```</p>

<p>We can use all of Doctrine's classes anywhere else in our code.
<code>php
&lt;?php
use Doctrine\ORM;
$manager = EntityManager::create(array('driver' =&gt; 'pdo_sqlite', 'path' =&gt; ':memory:/'));
// ...
</code></p>

<p>I still have a lot to learn and the documentation on 2.0 is a little sparse as yet, but this is a start.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dependency Injection Container Resource in Zend Framework]]></title>
    <link href="http://blog.tekerson.com/2009/07/06/dependency-injection-container-resource-in-zend-framework/"/>
    <updated>2009-07-06T13:00:51+10:00</updated>
    <id>http://blog.tekerson.com/2009/07/06/dependency-injection-container-resource-in-zend-framework</id>
    <content type="html"><![CDATA[<p>A good dependency injection container is a godsend when it comes to managing the dependency tree of even a moderately complex domain model. As such, it comes as no surprise there has been much discussion about them of late in the PHP and Zend Framework communities.</p>

<p>Based on the <a href="http://github.com/beberlei/yadif/tree/master">Yadif</a> and Benjamin Eberlei's recent look at <a href="http://www.whitewashing.de/blog/articles/117">Using a Dependency Injection Container with Zend_Application</a>, where he replaces Zend_Applications default container instance (A Zend_Registry instance) with a Yadif_Container, I have created a Zend_Application_Resource to allow configuration based injection of dependencies into the container via the normal ZF configuration file (application.ini)</p>

<p>The container resource copies any already instantiated objects from the old container into the new one, then replaces the default container.</p>

<p>``` php
&lt;?php
class Tek_Application_Resource_Container extends Zend_Application_Resource_ResourceAbstract
{</p>

<pre><code>protected $_container = null;

public function getContainer()
{
    if (null === $this-&gt;_container) {
        $options = $this-&gt;getOptions();
        $container = $this-&gt;_getBootstrap()-&gt;getContainer();
        if (!$container instanceof Yadif_Container) {
            $config = isset($options['options']) ? new Zend_Config($options['options']) : null;
            $container = new Yadif_Container(array(), $config);

            // import instances from the existing (Zend_Registry) container
            foreach ($this-&gt;_getBootstrap()-&gt;getContainer() as $key =&gt; $instance) {
                $container-&gt;__set($key, $instance);
            }
        }
        $container-&gt;addComponents($options['objects']);
        $this-&gt;_container = $container;
    }

    return $this-&gt;_container;
}

public function init()
{
    $this-&gt;getContainer();
    $this-&gt;_getBootstrap()-&gt;setContainer($this-&gt;_container);
    return $this-&gt;_container;
}

protected function _getBootstrap()
{
    $app = $this-&gt;getBootstrap()-&gt;getApplication();
    if ($app instanceof Zend_Application) {
        return $app-&gt;getBootstrap();
    } else {
        return $app;
    }
}
</code></pre>

<p>}
```</p>

<p>I've also created a simple action helper to allow easy grabbing of resources from the action controllers. Both reside in <a href="http://github.com/tekerson/Tek/tree/master">my extensions repository</a>.</p>

<p>To use the container resource you will need to add the prefix and path to the bootstrappers plugin loader:</p>

<p>``` php
&lt;?php
class Bootstrap extends Zend_Application_Bootstrap_Bootstrap
{
// ...</p>

<pre><code>protected function _initPlugins()
{
   $this-&gt;getPluginLoader()-&gt;addPrefixPath(
       'Tek_Application_Resource',
       'Tek/Application/Resource'
   );
}
</code></pre>

<p>// ...
}
```</p>

<p>Then you can add the resources and their dependencies via the normal configuration system. This means adding lines like:</p>

<pre><code>resources.container.objects.Log.class = "Zend_Log"
resources.container.objects.Log.arguments.0 = "Log_Writer"

resources.container.objects.Log_Writer.class = "Zend_Log_Writer_Stream"
resources.container.objects.Log_Writer.arguments.0 = "%Log_Writer.stream%"

resources.container.options.Log_Writer.stream = APPLICATION_PATH "/../log/application.log"
</code></pre>

<p>There are 2 resources defined here, the "Log" and the "Log_Writer".</p>

<ol>
<li><p>Log is an instance of Zend_Log and takes a Log_Writer resource as the first (and only) argument to its constructor.</p></li>
<li><p>The Log_Writer resource is an instance of Zend_Log_Writer_Stream and takes a scalar as its only argument. The scalar value is defined in the container option specified.</p></li>
</ol>


<p>Now, the controller can write a log like this.</p>

<p>``` php
&lt;?php
$logger = $this->getInvokeArg('bootstrap')->getResource('Log');
// or, with the helper
$logger = $this->_helper->resource('Log');</p>

<p>$logger->log('A log message', Zend_Log::NOTICE);
```</p>

<p>While this is a simple example, it can be really beneficial when working with, for example, a service layer. The service you need might depend on another service, both of which may depend on an Authorization service. All the services depend on their data mappers (which themselves depends on a database connection) and their entity factories, etc.
Instantiating a dependency tree like this for every object you need can lead to duplicate and hard to modify code. Dependency injection coupled with a good container can provide highly versatile code whose behaviour can be drastically changed by only modifying a configuration file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Modular Application in Zend Framework - Part 2]]></title>
    <link href="http://blog.tekerson.com/2009/06/28/building-a-modular-application-in-zend-framework-part-2/"/>
    <updated>2009-06-28T00:43:35+10:00</updated>
    <id>http://blog.tekerson.com/2009/06/28/building-a-modular-application-in-zend-framework-part-2</id>
    <content type="html"><![CDATA[<p>Welcome to part two of the series exploring the modular application structure in Zend Framework. With the basic application set up in <a href="http://blog.tekerson.com/2009/06/17/building-a-modular-application-in-zend-framework-part-1/">part one</a>, we can get down to actually creating our first module. We're going to refactor the <a href="http://framework.zend.com/docs/quickstart/">official quickstarts</a> guestbook. This will let us focus on the modular structure without getting bogged down in business logic.</p>

<p>Note, there are still some bugs in Zend_Tool that prevent this working as it should, I will note the bugs and their fixes as we encounter them.</p>

<h2>Create the module</h2>

<p>From the base path of our application (/WORKING/PATH/aza from the last article), we can issue the command to the Zend_Tool CLI to create our guestbook module.</p>

<pre><code>zf create module guestbook
</code></pre>

<p>Then, create the index controller within the guestbook module.</p>

<pre><code>zf create controller index 1 guestbook
</code></pre>

<p>The "1" argument tells Zend_Tool that we want to automatically create an index action within the new controller. We can get a help listing like this:</p>

<pre><code>zf create controller ?
</code></pre>

<p>Once the new module and controller is created we need to tell the application that we are using modules. We do this by adding two lines to the configs/application.ini. The first activates the modules resource. The second configures the front controller, telling it where the modules are located. These lines should be added to the end of the production section of the .ini file.</p>

<pre><code>resources.modules = ""
resources.frontController.moduleDirectory = APPLICATION_PATH "/modules"
</code></pre>

<p>To check our module is working, we can navigate to our guestbook at http://aza/guestbook and we should see the default view for the index action.</p>

<p><a href="http://framework.zend.com/issues/browse/ZF-7121">Bug</a>: Zend_Tool doesn't prefix the controller names within the module name. The guestbook index controller class IndexController needs to be changed to Guestbook_IndexController.
<a href="http://framework.zend.com/issues/browse/ZF-6908">Bug</a>: The default view for the controller is the same as the main page, it shouldn't be but we don't really care, we're going to replace it anyway.</p>

<h2>Create module bootstrap</h2>

<p>In the same way that the Bootstrap.php set up the environment for our main application (also known as the default module) each module has its own Bootstrap.php that adds anything additional that each module needs. Zend_Tool doesn't create this bootstrap by default, so we need to create application/modules/guestbook/Bootstrap.php and it should contain.</p>

<p><code>php
&lt;?php
class Guestbook_Bootstrap extends Zend_Application_Module_Bootstrap
{
}
</code></p>

<p>By creating this file, the application will automatically perform module bootstrap tasks such as adding autoloaders for the default resources; including models, forms and services. Any other module specific bootstrapping tasks can be added as _init*() functions. In our case, we don't need any further bootstrapping.</p>

<p><strong>Important note</strong>: <strong><em>All</em> bootstrap functions</strong> for <strong>every module</strong> are run for <strong>every request</strong>.</p>

<p>The bootstrap process occurs <em>before</em> routing and dispatch, so during bootstrap there is no way to know which module/controller/action is being requested. Therefore, any setup that should be done only if a particular module is requested should be done in plugins, <em>not</em> bootstrap.</p>

<h2>Getting Quickstart</h2>

<p>Now we have the module skeleton in place, lets start porting the guestbook code to our module. This turns out to be fairly easy; the majority of the changes involve prefixing class names with the module name.</p>

<p>To make life easy, start by acquiring a copy of the completed <a href="http://framework.zend.com/docs/quickstart">quickstart application</a> (it's on the right hand side in zip or tar.gz form).</p>

<h2>Importing Quickstart</h2>

<p>Once you have downloaded and extracted the files into a temporary folder, we can start copying in the files we need.</p>

<p>We need to copy the GuestbookController from the Quickstart (making it the IndexController) and all of the Quickstart models, views and forms to the appropriate places within our module.</p>

<p>From (Quickstart)To (Aza)</p>

<p>application/controllers/GuestbookController.php</p>

<p>application/modules/guestbook/controllers/IndexController.php</p>

<p>application/models/*
application/modules/guestbook/models/</p>

<p>application/views/scripts/guestbook/*
application/modules/guestbook/views/scripts/index/</p>

<p>application/forms/*
application/modules/guestbook/forms/</p>

<p>The controller and the views will require overwriting the existing files.</p>

<h2>Porting Quickstart</h2>

<p>Now we have the files in the right place, we need to update the files to be modular.</p>

<p>We'll start with the easiest one, the form. It is simple because it is already prefixed for the Default module, all we need to do it change the prefix to Guestbook_. So the class in application/modules/guestbook/forms/Guestbook.php changes from Default_Form_Guestbook to Guestbook_Form_Guestbook.</p>

<p>Now the models. There are many more changes here but they are just as simple because the models (like the form) are already prefixed with "Default<em>", but the classes also contain references to each other, so we need to change more than just the class names. A simple search and replace of "Default</em>" with "Guestbook_" in the application/modules/guestbook/models/ directory is all we need.</p>

<p>The controller is a little trickier because it isn't already prefixed (controllers in the default module aren't), but it's still not too hard. The name of the class in application/modules/guestbook/controllers/IndexController.php just needs to be changed from GuestbookController to Guestbook_IndexController, as it has changed from the guestbook controller within default module (no prefix) to the index controller within the guestbook module. We also need to update the references to the models and forms, the same search and replace as we used in the models will suffice.</p>

<p>Finally, we get to the view. In our index view (application/modules/guestbook/views/scripts/index/index.phtml) we need to update the parameters passed to the url helper to reference our controller. Adding the module, and changing the controller leaves the first link looking like this:
``` html</p>

<p><a href="<?php echo $this->url(
    array(
        'module'    => 'guestbook',
        'controller' => 'index',
        'action'     => 'sign'
    ), 
    'default', 
    true) ?>">Sign Our Guestbook</a></p>
```

Done!



## Connect the database


I'll leave the actual creation of the database to you. It is he same as the Quickstart and this post is already particularly long. You will need to create the database, and add the configuration to the application.ini.



## Conclusion


We have just ported the Quickstart guestbook application to a Zend Framework Module. Modularizing applications allows for easier code reuse across applications. Hopefully modules will become standardized to the point that there will be a repository of modules that can be added to your application and providing drop in functionality.



## Download


For those who had trouble following along, I've made the entire application (including database) available via my [github repository](http://github.com/tekerson/A-Zend-Application/tree/master).

]]></content>
  </entry>
  
</feed>
