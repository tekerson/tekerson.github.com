<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Deprecated Behaviour]]></title>
  <link href="http://blog.tekerson.com/categories/code/atom.xml" rel="self"/>
  <link href="http://blog.tekerson.com/"/>
  <updated>2015-08-02T18:34:40+10:00</updated>
  <id>http://blog.tekerson.com/</id>
  <author>
    <name><![CDATA[Brenton Alker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Entity Objects in JavaScript]]></title>
    <link href="http://blog.tekerson.com/2015/07/31/entity-objects-in-javascript/"/>
    <updated>2015-07-31T18:26:37+10:00</updated>
    <id>http://blog.tekerson.com/2015/07/31/entity-objects-in-javascript</id>
    <content type="html"><![CDATA[<p>In my last post I looked at Value Objects and how I might implement them in JavaScript. This time I&rsquo;m going to look at Entities. Entities are kind of the next rung on the ladder in the domain model. They can be composed of Value Objects.</p>

<p>Entities are <em>not</em> defined by their attributes in the same way as Value Objects, instead they have an enduring &ldquo;Identity&rdquo;. The canonical example is a person. A person isn&rsquo;t defined by their name, their age, their height, or any other attribute. Any of these can change and they are still the same person (barring any deep philisophical discussion). In software systems, this is usually implemented by assigning an arbitrary key that uniquely identifies the entity for its lifetime.</p>

<p>Where this key comes from is irrelevant to this discussion, but it is common for it to be a value that is generated in the persistence layer when the data is saved.</p>

<p>So, from this we could say that an entity is an instance with an identity and a collection of mutable attributes. Using a similar validation style to the one I used for Value Objects, I might write this in JavaScript like:</p>

<p>``` javascript
function Trail(id, fields) {</p>

<pre><code>if (!id instanceof TrailId) {
    throw new TypeError('Expected: TrailId');
}
if (!fields instanceof TrailFields) {
    throw new TypeError('Expected: TrailFields');
}

this.id = id;
this.fields = fields;
return Object.freeze(this);
</code></pre>

<p>}
```</p>

<p>But, I just said that entities are mutable, so, why am I still calling <code>Object.freeze</code>? Because, I want <em>this</em> object &ndash; the Entity &ndash; to be immutable, its <code>id</code> can&rsquo;t change but it&rsquo;s <code>fields</code> are still mutable; I&rsquo;m taking advantage of the shallow freeze semantics.</p>

<p>Side Note: If you&rsquo;ve been paying close attention, you may have noticed I&rsquo;m <code>throw</code>ing exceptions here instead of <code>return</code>ing them like last time. This is because I consider passing the wrong type to be a developer error, which is (hopefully) an exceptional situation, as opposed to a user entering an invalid value, which is to be expected.</p>

<p>Ignoring the <code>TrailId</code>, which will be a Value Object similar to the previous post. The only interesting part left is the <code>TrailFields</code> object. This will be slightly different to the Value Object and the Entity itself because it&rsquo;s mutable. So, its validation must be performed in the setters instead of the constructor. Using the common setter/getter pattern, it looks like:</p>

<p>``` javascript
function TrailFields(name, distance, grade) {
  this.name(name);
  this.distance(distance);
  this.grade(grade);
}</p>

<p>TrailFields.prototype.name = function(name) {
  if (name === undefined) {</p>

<pre><code>return this._name;
</code></pre>

<p>  }
  if (!name instanceof TrailName) {</p>

<pre><code>throw new TypeError('Expected: TrailName');
</code></pre>

<p>  }
  this._name = name;
}</p>

<p>TrailFields.prototype.distance = function(distance) {
  if (distance === undefined) {</p>

<pre><code>return this._distance;
</code></pre>

<p>  }
  if (!distance instanceof Distance) {</p>

<pre><code>throw new TypeError('Expected: Distance');
</code></pre>

<p>  }
  this._distance = distance;
}</p>

<p>TrailFields.prototype.grade = function(grade) {
  if (grade === undefined) {</p>

<pre><code>return this._grade;
</code></pre>

<p>  }
  if (!grade instanceof TrailGrade) {</p>

<pre><code>throw new TypeError('Expected: TrailGrade);
</code></pre>

<p>  }
  this._grade = grade;
}
```</p>

<p>Even though we now have setters, all of the values are still required in the constructor. This makes it impossible* to have a partially instantiated instance running around.</p>

<p>* &ldquo;Impossible&rdquo; is an optimistic take on it. If you want to assign invalid values directly to the &ldquo;internal&rdquo; fields, this won&rsquo;t protect you from yourself. This is JavaScript after all.</p>

<p>Another way of modeling the <code>TrailEntity</code> is to have the fields as properties of the entity but leave the <code>id</code> as <code>null</code> until it is persisted, then updating it. The advantage of explicitly defining <code>TrailFields</code> is, once again, less mutation and preventing the creation of incomplete instances.</p>

<p>Before the data is persisted we have only <code>TrailFields</code>. Once it is persisted <em>then</em> we have a <code>TrailEntity</code>. The different types represent the different stages in the lifecycle and the two states are less easily confused.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Value Objects in JavaScript]]></title>
    <link href="http://blog.tekerson.com/2015/07/15/value-objects-in-javascript/"/>
    <updated>2015-07-15T21:31:43+10:00</updated>
    <id>http://blog.tekerson.com/2015/07/15/value-objects-in-javascript</id>
    <content type="html"><![CDATA[<p>Value Objects are awesome! Many of the JavaScript applications I have encountered don&rsquo;t explicitly define their domain objects at all, instead passing primitives or raw object literals around.  Value Objects can define the values in an way that allows discussion and reasoning about the values being passed around. As well as a logical place to &ldquo;put code&rdquo;.</p>

<p>To explore their use, lets start by defining a simple Value Object &ndash; Distance &ndash; because I don&rsquo;t claim to be creative in these matters.</p>

<p>About the simplest way of defining a Value Object is like this.</p>

<p><code>javascript
function Distance(value, unit) {
  this.value = value;
  this.unit = unit;
}
</code></p>

<p>This is a good start and really isn&rsquo;t much more difficult that using object literals. Given the other advantages (that can be added incrementally), I don&rsquo;t see a down side.</p>

<p>But, but we can do better!</p>

<h2>Immutability</h2>

<p>My first step would be to make it immutable. Immutability is a great property to have, especially for things being passed around a lot. For Value Objects, I think it is a reasonable default.</p>

<p><code>javascript
function Distance(value, unit) {
  this.value = value;
  this.unit = unit;
  return Object.freeze(this);
}
</code></p>

<p>Now, <code>Object.freeze</code> isn&rsquo;t perfect. It only freezes the object itself; nested properties can still be mutated. But, I still think it&rsquo;s worth it to prevent accidental mutation, or third party code mutating your objects without your knowledge (I&rsquo;m looking at you, <code>ng-repeat</code>).</p>

<h2>Validation</h2>

<p>The next issue to look at is validation of the fields. <code>new Distance(12, 'parsecs');</code> would ostensibly give a valid <code>Distance</code>, but it probably wouldn&rsquo;t be very useful. We can use the constructor function to check the parameters, ensuring only valid values can be created. In this case, say &ndash; A distance is a positive whole number measured in centimetres, metres or kilometres.</p>

<p>It might be implemented this way:</p>

<p>``` javascript
function Distance(value, unit) {
  if (parseInt(value, 10) !== value) {</p>

<pre><code>return new Error('Distance Value is not a decimal number');
</code></pre>

<p>  }
  if (Distance.units.indexOf(unit) === -1) {</p>

<pre><code>return new Error('Distance Unit is not is not valid');
</code></pre>

<p>  }</p>

<p>  this.value = value;
  this.unit = unit;
  return Object.freeze(this);
}
Distance.units = [&lsquo;cm&rsquo;, &rsquo;m', &lsquo;km&rsquo;];
```</p>

<p>The decision to <code>return</code> the <code>Error</code>s instead of <code>throw</code> them is probably debatable, but I don&rsquo;t think validation errors are &ldquo;exceptional&rdquo; and find it composes better with higher order functions (eg. <code>map</code>, <code>filter</code>, <code>reduce</code>) which I generally use a lot of. Either way, the point is it won&rsquo;t get back a valid <code>Distance</code> object. And, since they are immutable, a valid <code>Distance</code> only ever be valid.</p>

<h2>Logic</h2>

<p>Once a Value Object is defined, it becomes a great place to put some logic. Normalization and comparison logic is a good candidate. For example, adding methods to compare two distances.</p>

<p><code>javascript
Distance.multipliers = [1, 100, 100000];
Distance.prototype.toCentimetres = function () {
  var multiplier = Distance.multipliers[Distance.units.indexOf(this.unit)];
  return this.value * multiplier;
};
Distance.prototype.isCloserThan = function (other) {
  return this.toCentimetres() &lt; other.toCentimetres();
};
</code></p>

<p>It&rsquo;s also a good place to add domain logic; the application may define how far is considered &ldquo;walkable&rdquo;. By having the Value Object, it provides somewhere for this knowledge to go and prevents <code>if (distance &lt; 5)</code> being duplicated across the application.</p>

<p><code>javascript
Distance.walkable = new Distance(5, 'km');
Distance.prototype.isWalkable = function () {
  return this.isCloserThan(Distance.walkable);
};
</code></p>

<p>Then, when I decide I&rsquo;m too lazy to walk 5km, it only needs changing in one place.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Applying Functional Concepts to OOP: Referential Transparency / Command-Query Separation]]></title>
    <link href="http://blog.tekerson.com/2013/08/12/applying-functional-concepts-to-oop-referential-transparency-slash-command-query-separation/"/>
    <updated>2013-08-12T23:34:00+10:00</updated>
    <id>http://blog.tekerson.com/2013/08/12/applying-functional-concepts-to-oop-referential-transparency-slash-command-query-separation</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been studying functional programming lately (it&rsquo;s trendy) and while it&rsquo;s great to just learn new languages and paradigm, it&rsquo;s always nice when the principles can be applied to everyday work.</p>

<p>Command-Query separation is probably one of the lesser known principles of object-oriented programming (OOP). Proposed by Bertrand Meyer in &ldquo;Object Oriented Software Construction&rdquo;, it states that a function (or method) should perform a Command (do something) or a Query (return a value) but not both. So, any function that returns a value should not modify state. In <a href="http://martinfowler.com/bliki/CommandQuerySeparation.html">Martin Fowler&rsquo;s discussion of the principle</a> he mentions that &ldquo;it would be nice if the language itself would support this notion&rdquo;.</p>

<p>If occurs to me that functional languages do indeed grant Mr. Fowler his wish.</p>

<p>Functional programmers aim to compose programs using &ldquo;pure&rdquo; functions. In this case, &ldquo;pure&rdquo; is used to mean a functions that are &ldquo;referentially transparent&rdquo;, that is, they only depend upon their parameters. A pure function, given the same set of parameters, will always return the same result. No external influences, including variables, databases, inputs or outputs can be used or modified by its execution.</p>

<p>Of course, a program that takes no input, can&rsquo;t access a data store and produces no output isn&rsquo;t very useful. As such, even the most pure of the functional languages have to allow the nasty real-world into its pristine clean-room. The difference though, is the strict boundaries that are constructed to protect the pure world from the impure. In Haskell, which is often held up as the purest of functional languages, this airlock is provided by the IO Monad. I won&rsquo;t go into what a Monads are, it doesn&rsquo;t matter, and I&rsquo;m not sure I even explain them even if I wanted to. The point is, there are language features that strictly separate functions that alter state with those that &ldquo;only&rdquo; perform calculation.</p>

<p>These referentially transparent &ldquo;pure&rdquo; functions are revered because they can be reused, re-ordered or parallelized and are guaranteed to always produce the same result. This makes programs more predictable and thus simpler to debug. When you know a function is pure, you need only check its return value; it can&rsquo;t have changed anything outside of itself.</p>

<p>So, while the languages most of us use daily don&rsquo;t offer this as a feature, maybe following the principle more often would make for more predictable, bug free code. Wouldn&rsquo;t that be nice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Post-fetch Manipulation (sorting) of ngResources in AngularJS]]></title>
    <link href="http://blog.tekerson.com/2013/07/10/post-fetch-manipulation-sorting-of-ngresources-in-angularjs/"/>
    <updated>2013-07-10T17:06:00+10:00</updated>
    <id>http://blog.tekerson.com/2013/07/10/post-fetch-manipulation-sorting-of-ngresources-in-angularjs</id>
    <content type="html"><![CDATA[<p>Just a quick tip that I found useful in a recent Angular.js application.</p>

<p>I was trying to randomize the order of elements within a list retrieved from a <a href="http://docs.angularjs.org/api/ngResource.$resource">ngResource</a> (answers in a quiz or poll application). The naive approach would be to write the code as if the resource fetch is synchronous.</p>

<p>``` js
angular.module(&lsquo;myApp&rsquo;).controller(&lsquo;MyCtrl&rsquo;, function ($scope, $resource, $routeParams) {</p>

<pre><code>var shuffle = function (list) { /* ... */ };
var repo = $resource('/api/question/:id', {id: '@id'});
$scope.question = repo.get({id: $routeParams.id});
shuffle(question.anwers);
</code></pre>

<p>});
```</p>

<p>The problem that will soon become apparent, is that the <code>get</code> is <em>not</em> synchronous. So, when the <code>shuffle(question.answer)</code> is called, the <code>question</code> object is not yet populated.</p>

<p>One approach that I encountered to circumvent the issue is to use the built in <a href="http://docs.angularjs.org/api/ng.filter:orderBy">orderBy filter</a> with a callback that randomly chooses the order. This works, because the filter is run when the returning data triggers a new digest. This may be good enough in some circumstances. The problem I encountered with this approach however, is the list is re-sorted every digest cycle. So, if there is anything much going on in the scope, the list will re-sort itself causing the bound elements in the page to jump around.</p>

<p>The solution for me, was to sort the list once, after it is retrieved. This can be accomplished by passing a callback, as the second argument to <code>$resource.get</code>, that will be called with the returned data once it becomes available. This allows you to perform any required manipulation on the data before it is assigned to the <code>$scope</code>.</p>

<p>``` js
angular.module(&lsquo;myApp&rsquo;).controller(&lsquo;MyCtrl&rsquo;, function ($scope, $resource, $routeParams) {</p>

<pre><code>var shuffle = function (list) { /* ... */ };
var repo = $resource('/api/question/:id', {id: '@id'});
$scope.question = repo.get({id: $routeParams.id}, function (question) {
    shuffle(question.anwers);
});
</code></pre>

<p>});
```</p>

<p>In this instance, the answers to the question are shuffled, but the pattern is useful any time you want to perform an action only <em>after</em> the data if fetched. This may include calculating aggregates or even fetching extra, dependant data.</p>

<p>As an aside, I don&rsquo;t believe this manipulation belongs in the controller and should probably be encapsulated in a service that the controller consumes. I will have a look at using &ldquo;fat&rdquo; services and &ldquo;lean&rdquo; controllers in a future post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrapping the Doctrine 2.0 Autoloader in Zend Framework]]></title>
    <link href="http://blog.tekerson.com/2009/09/08/bootstrapping-the-doctrine2-autoloader-in-zend-framework/"/>
    <updated>2009-09-08T01:03:53+10:00</updated>
    <id>http://blog.tekerson.com/2009/09/08/bootstrapping-the-doctrine2-autoloader-in-zend-framework</id>
    <content type="html"><![CDATA[<p><em><strong>Please Note:</strong> This post was based on the Alpha release of Doctrine2. They have since added Doctrine\Common\IsolatedClassLoader which (among other things) doesn&rsquo;t automatically register itself so we no longer have to unregister it, making things much easier.</em></p>

<p>Doctrine 2.0 looks like it might finally be the ORM framework I have been seeking for PHP. While the older versions of Doctrine provided great functionality, they were too intrusive for my taste. I think an ORM should provide a true <a href="http://martinfowler.com/eaaCatalog/dataMapper.html">data mapper</a>; in which the domain entities need know nothing about their persistence.</p>

<p>Matthew Weier O'Phinney has already posted about <a href="http://weierophinney.net/matthew/archives/220-Autoloading-Doctrine-and-Doctrine-entities-from-Zend-Framework.html">autoloading Doctrine in Zend Framework</a>, but Doctrine2 presents some new challenges. Mainly that Doctrine2 is fully PHP5.3, including &ldquo;real&rdquo; namespaces, so its classes don&rsquo;t follow the (current) Zend naming standard and the ZF autoloader won&rsquo;t load them for us.</p>

<p>Good News, Doctrine provides its own autoloader that we can leverage to load its own classes.</p>

<p>Bad News, the Doctrine autoloader automatically registers itself with spl_autoload_register, causing the normal Zend loader to be forgotten (well, pushed down the stack, where it isn&rsquo;t very useful).</p>

<p>Good News, it&rsquo;s easy to remove the doctrine autoloader using spl_autoload_unregister, then push it onto the ZF autoloader stack, targeting the Doctrine namespace. Letting the ZF autoloader call it as necessary.</p>

<p>Enough jibber-jabber, how do we do all this? In the bootstrap! Adding this method to your Bootstrap.php will achieve what we want; adding the Doctrine autoloader to the Zend Framework autoloader queue for the &ldquo;Doctrine\&rdquo; namespace.</p>

<p>``` php
&lt;?php</p>

<pre><code>protected function _initDoctrine()
{
    // Create the doctrine autoloader and remove it from the spl autoload stack (it adds itself)
    require_once 'Doctrine/Common/ClassLoader.php';
    $doctrineAutoloader = array(new \Doctrine\Common\ClassLoader(), 'loadClass');
    spl_autoload_unregister($doctrineAutoloader);

    // Fetch the global Zend Autoloader
    $autoloader = Zend_Loader_Autoloader::getInstance();

    // Push the doctrine autoloader to load for the Doctrine\ namespace
    $autoloader-&gt;pushAutoloader($doctrineAutoloader, 'Doctrine\\');
}
</code></pre>

<p>```</p>

<p>We can use all of Doctrine&rsquo;s classes anywhere else in our code.
<code>php
&lt;?php
use Doctrine\ORM;
$manager = EntityManager::create(array('driver' =&gt; 'pdo_sqlite', 'path' =&gt; ':memory:/'));
// ...
</code></p>

<p>I still have a lot to learn and the documentation on 2.0 is a little sparse as yet, but this is a start.</p>
]]></content>
  </entry>
  
</feed>
